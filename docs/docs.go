// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Log into an account using provided username and password. And get an API key.\nUsername can be between 3-20 characters.\nPassword must be at least 3 characters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log into an account and get an API key.",
                "parameters": [
                    {
                        "description": "Login Account",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.UserCredentials"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/server.ApiKeyResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid username/password",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorReason"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorReason"
                        }
                    }
                }
            }
        },
        "/games": {
            "post": {
                "description": "Authorized users can make a match and receive a sharable link for anyone to play with them.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Create a match, and get a sharable link.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must contain JWT from auth/login in the format Bearer: \u003cJWT\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/users": {
            "post": {
                "description": "Username can be between 3-20 characters.\nPassword must be at least 3 characters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create an account using provided username and password.",
                "parameters": [
                    {
                        "description": "Register Account",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.UserCredentials"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Api Key",
                        "schema": {
                            "$ref": "#/definitions/server.ApiKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorReason"
                        }
                    },
                    "409": {
                        "description": "Username already exists",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorReason"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorReason"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "server.ApiKeyResponse": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string"
                }
            }
        },
        "server.ErrorReason": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "example": "reason"
                }
            }
        },
        "server.UserCredentials": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 3,
                    "example": "Password123"
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4,
                    "example": "JohnDoe"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Chess API",
	Description:      "chess api for playing chess online.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
