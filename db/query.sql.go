// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash, api_key)
VALUES (?, ?, ?)
RETURNING uid, username, password_hash, api_key, created_at
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	ApiKey       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.PasswordHash, arg.ApiKey)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.PasswordHash,
		&i.ApiKey,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM games
WHERE id = ?
`

func (q *Queries) DeleteGame(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGame, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE uid = ?
`

func (q *Queries) DeleteUser(ctx context.Context, uid int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, uid)
	return err
}

const getGameById = `-- name: GetGameById :one
SELECT id, white_uid, black_uid, result, moves, finished_at FROM games
WHERE Id = ?
`

func (q *Queries) GetGameById(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameById, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.WhiteUid,
		&i.BlackUid,
		&i.Result,
		&i.Moves,
		&i.FinishedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT uid, username, password_hash, api_key, created_at FROM users
WHERE uid = ?
`

func (q *Queries) GetUserById(ctx context.Context, uid int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.PasswordHash,
		&i.ApiKey,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT uid, username, password_hash, api_key, created_at FROM users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.PasswordHash,
		&i.ApiKey,
		&i.CreatedAt,
	)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT id, white_uid, black_uid, result, moves, finished_at FROM games
ORDER BY finished_at DESC
LIMIT ? OFFSET ?
`

type ListGamesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListGames(ctx context.Context, arg ListGamesParams) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, listGames, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.WhiteUid,
			&i.BlackUid,
			&i.Result,
			&i.Moves,
			&i.FinishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGamesByPlayer = `-- name: ListGamesByPlayer :many
SELECT id, white_uid, black_uid, result, moves, finished_at FROM games
WHERE white_uid = ? OR black_uid = ?
ORDER BY finished_at DESC
LIMIT ? OFFSET ?
`

type ListGamesByPlayerParams struct {
	WhiteUid int64
	BlackUid int64
	Limit    int64
	Offset   int64
}

func (q *Queries) ListGamesByPlayer(ctx context.Context, arg ListGamesByPlayerParams) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, listGamesByPlayer,
		arg.WhiteUid,
		arg.BlackUid,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.WhiteUid,
			&i.BlackUid,
			&i.Result,
			&i.Moves,
			&i.FinishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT uid, username, password_hash, api_key, created_at FROM users
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uid,
			&i.Username,
			&i.PasswordHash,
			&i.ApiKey,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeGame = `-- name: StoreGame :one
INSERT INTO games (white_uid, black_uid, result, moves, finished_at)
VALUES (?, ?, ?, ?, ?)
RETURNING id, white_uid, black_uid, result, moves, finished_at
`

type StoreGameParams struct {
	WhiteUid   int64
	BlackUid   int64
	Result     string
	Moves      string
	FinishedAt time.Time
}

func (q *Queries) StoreGame(ctx context.Context, arg StoreGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, storeGame,
		arg.WhiteUid,
		arg.BlackUid,
		arg.Result,
		arg.Moves,
		arg.FinishedAt,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.WhiteUid,
		&i.BlackUid,
		&i.Result,
		&i.Moves,
		&i.FinishedAt,
	)
	return i, err
}

const updateUserAPIKey = `-- name: UpdateUserAPIKey :exec
UPDATE users
SET api_key = ?1
WHERE username = ?2
`

type UpdateUserAPIKeyParams struct {
	ApiKey   string
	Username string
}

func (q *Queries) UpdateUserAPIKey(ctx context.Context, arg UpdateUserAPIKeyParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAPIKey, arg.ApiKey, arg.Username)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password_hash= ?
WHERE uid = ?
RETURNING uid, username, password_hash, api_key, created_at
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	Uid          int64
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.PasswordHash, arg.Uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.PasswordHash,
		&i.ApiKey,
		&i.CreatedAt,
	)
	return i, err
}
